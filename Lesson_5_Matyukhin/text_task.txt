Можно сделать всё или одно на выбор, применив при этом один из структурных паттернов, либо
аргументировать, почему те или иные паттерны не были использованы:
1. Создать декоратор для получения связки url-view в приложение, чтобы можно было добавлять
url, как во фреймворке Flask @app(‘/some_url/’).
2. Добавить декоратор @debug, для view; если мы указываем его над view, то в терминал
выводятся название функции и время её выполнения.
3. Добавить подкатегории. Т. е., категория курса может входить в другую категорию, а может не
входить, и вложенность будет любая. Например, «Программирование -> Веб -> Python ->
Django». После на страницу списка категорий добавить вывод количества курсов в каждой из
категорий. Например, Программирование — 10, Web — 5, Python — 3, …
4. Добавить два новых вида WSGI-application. Первый — логирующий (такой же, как основной,
только для каждого запроса выводит информацию (тип запроса и параметры) в консоль.
Второй — фейковый (на все запросы пользователя отвечает: 200 OK, Hello from Fake).
5. По желанию можно добавить любой другой полезный функционал.